#!/usr/bin/python3
#
# Copyright 2020 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""
Verify that the lower bounds set on dependencies in Cargo.toml are not
incorrect by being too low.
"""


# isort: STDLIB
import argparse
import subprocess
import sys
from random import shuffle

# isort: LOCAL
from _utils import build_cargo_metadata, build_cargo_tree_dict


def _do_updates(explicit_dependencies, manifest_path):
    """
    Emit commands that update dependencies to the lowest allowed by Cargo.toml.

    :param explicit_dependencies: map of the dependencies in Cargo.toml
    :type explicit_dependencies: dict of str * str
    :param manifest_path: the path to Cargo.toml
    :type manifest_path: str or NoneType
    :returns: crates that failed to update
    :rtypes: list of str * str
    """

    command_prefix = [
        "cargo",
        "update",
    ]
    if manifest_path is not None:
        command_prefix.append("--manifest-path=%s" % manifest_path)

    def _update_once(updatables):
        """
        Try once to update all crates to their precise versions.
        Randomize the order in which updates are tried.

        :param updatables: crates to update
        :type updatables: list of str * str

        :returns: the crates that failed to update
        :rtype: list of str * str
        """
        # Read the dependency versions specified in Cargo.lock from Cargo.toml
        cargo_tree = build_cargo_tree_dict(manifest_path)

        assert frozenset(explicit_dependencies.keys()) == frozenset(
            cargo_tree.keys()
        ), "in Cargo.toml but not in 'cargo tree' output: %s, vice-versa: %s" % (
            frozenset(explicit_dependencies.keys()) - frozenset(cargo_tree.keys()),
            frozenset(cargo_tree.keys()) - frozenset(explicit_dependencies.keys()),
        )

        shuffle(updatables)

        failed = []
        for (crate, version) in updatables:
            current_version = cargo_tree[crate]
            command = command_prefix + [
                "--package=%s:%s" % (crate, current_version),
                "--precise=%s" % version,
            ]
            try:
                subprocess.run(
                    command,
                    check=True,
                )
            except subprocess.CalledProcessError as err:
                failed.append((crate, version))
                print(err, file=sys.stderr)

        return failed

    updatables = list(explicit_dependencies.items())[:]
    while len(updatables) != 0:
        print("Update iteration started...", file=sys.stderr)
        result = _update_once(updatables)
        if frozenset(result) >= frozenset(updatables):
            break
        updatables = result

    return updatables


def main():
    """
    The main method
    """
    parser = argparse.ArgumentParser(
        description=(
            "Lowers all dependencies in Cargo.lock to the versions specified "
            "in Cargo.toml."
        )
    )
    help_text = "Manifest path for cargo commands"
    parser.add_argument(
        "--manifest-path", action="store", dest="manifest_path", help=help_text
    )

    args = parser.parse_args()

    # Read the dependency versions specified in Cargo.toml
    explicit_dependencies = build_cargo_metadata(args.manifest_path)

    return 0 if _do_updates(explicit_dependencies, args.manifest_path) == [] else 1


if __name__ == "__main__":
    sys.exit(main())
